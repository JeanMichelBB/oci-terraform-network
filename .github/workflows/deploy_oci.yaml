name: Deploy to OCI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up OCI CLI
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        with:
            command: "oci -v"
            silent: false

      - name: Configure OCI CLI
        env:
            OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
            OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
            OCI_REGION: ${{ secrets.OCI_REGION }}
            OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
            OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
        run: |
            mkdir -p ~/.oci
            echo "[DEFAULT]" > ~/.oci/config
            echo "user=${OCI_USER_OCID}" >> ~/.oci/config
            echo "fingerprint=${OCI_KEY_FINGERPRINT}" >> ~/.oci/config
            echo "tenancy=${OCI_TENANCY_OCID}" >> ~/.oci/config
            echo "region=${OCI_REGION}" >> ~/.oci/config
            echo "${OCI_PRIVATE_KEY}" > ~/.oci/oci_private_key.pem
            chmod 600 ~/.oci/oci_private_key.pem
            echo "key_file=~/.oci/oci_private_key.pem" >> ~/.oci/config
            chmod 600 ~/.oci/config
            echo "Config file created at ~/.oci/config"

      - name: Check OCI Instance lifecycle state
        run: |
            # Get all instance IDs with the name 'my-instance'
            INSTANCE_IDS=($(oci compute instance list \
                --compartment-id ${{ secrets.OCI_COMPARTMENT_ID }} \
                --query "data[?\"display-name\"=='my-instance'].id" \
                --raw-output))
        
            # Check if there are multiple instances
                if [ ${#INSTANCE_IDS[@]} -gt 1 ]; then
                    echo "Multiple instances found. Filtering for the running one."
                    for ID in "${INSTANCE_IDS[@]}"; do
                        STATE=$(oci compute instance get \
                            --instance-id "$ID" \
                            --query "data.\"lifecycle-state\"" \
                            --raw-output)
                        
                        if [ "$STATE" == "RUNNING" ]; then
                            INSTANCE_ID="$ID"
                            echo "Found running instance: $INSTANCE_ID"
                            break
                        elif [ "$STATE" == "TERMINATED" ]; then
                            echo "Instance $ID is terminated. Skipping..."
                        fi
                    done
                else
                    INSTANCE_ID=${INSTANCE_IDS[0]}
                fi
        
            if [ -z "$INSTANCE_ID" ]; then
                echo "No running instance found. Exiting..."
                exit 1
            fi
        
            while true; do
                INSTANCE_LIFECYCLE_STATE=$(oci compute instance get \
                    --instance-id "$INSTANCE_ID" \
                    --query "data.\"lifecycle-state\"" \
                    --raw-output)
        
                echo "Current instance state: $INSTANCE_LIFECYCLE_STATE"
        
                case "$INSTANCE_LIFECYCLE_STATE" in
                    "RUNNING")
                        echo "Instance is running, proceeding with deployment."
                        PUBLIC_IP=$(oci compute instance list-vnics \
                            --instance-id "$INSTANCE_ID" \
                            --query "data[0].\"public-ip\"" \
                            --raw-output)
                        echo "Instance Public IP: $PUBLIC_IP"
                        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
                        break
                        ;;
                    "STOPPED")
                        echo "Instance is stopped. Cannot proceed with deployment."
                        exit 1
                        ;;
                    "STARTING")
                        echo "Instance is starting. Waiting for it to be fully up..."
                        ;;
                    "STOPPING")
                        echo "Instance is stopping. Waiting for it to be fully stopped..."
                        ;;
                    "TERMINATED")
                        echo "Instance is terminated. Cannot proceed with deployment."
                        exit 1
                        ;;
                    *)
                        echo "Unexpected instance state: $INSTANCE_LIFECYCLE_STATE. Retrying..."
                        ;;
                esac
        
                sleep 10
                
            done
        
            echo "Instance is running, proceeding with deployment."

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Get OCI Instance IP
        run: echo "INSTANCE_IP=$(terraform output -raw instance_ip)" >> $GITHUB_ENV

      - name: Run Ansible Playbook
        env:
            PUBLIC_IP: ${{ steps.get_ip.outputs.PUBLIC_IP }}  
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
            ansible-playbook -i inventory.yaml deploy_oci.yaml